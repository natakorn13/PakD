import torch
import torch.nn as nn
from torchvision import transforms
from PIL import Image
from torchvision.models import efficientnet_v2_s
import io
import os

MODEL_PATH = os.path.join("services", "best_oral_disease_model_new.pth")

# ‡πÇ‡∏´‡∏•‡∏î checkpoint
checkpoint = torch.load(MODEL_PATH, map_location='cpu')

# ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏≤‡∏™‡∏à‡∏≤‡∏Å checkpoint (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
if 'classes' in checkpoint:
    class_names = checkpoint['classes']
else:
    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡πÄ‡∏î‡∏≤‡∏à‡∏≤‡∏Å classifier weight shape
    classifier_weight_shape = None
    for key in checkpoint['model_state_dict'].keys():
        if 'classifier' in key and 'weight' in key:
            classifier_weight_shape = checkpoint['model_state_dict'][key].shape
            break
    if classifier_weight_shape:
        num_classes_in_checkpoint = classifier_weight_shape[0]
        class_names = [f'class_{i}' for i in range(num_classes_in_checkpoint)]
    else:
        class_names = ['normal', 'cancer', 'herpes', 'injury', 'ulcer']  # default

num_classes = len(class_names)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•
model = efficientnet_v2_s(weights=None)
model.classifier[1] = nn.Linear(model.classifier[1].in_features, num_classes)

# ‡πÇ‡∏´‡∏•‡∏î‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•
model.load_state_dict(checkpoint['model_state_dict'])
model.eval()

# ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° transform pipeline (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ï‡∏≠‡∏ô train)
preprocess = transforms.Compose([
    transforms.Resize((640, 640)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406],
                         std=[0.229, 0.224, 0.225]),
])

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÇ‡∏£‡∏Ñ‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û bytes
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÇ‡∏£‡∏Ñ‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û bytes
def detect_disease(image_bytes: bytes) -> dict:
    try:
        img = Image.open(io.BytesIO(image_bytes)).convert("RGB")
        input_tensor = preprocess(img).unsqueeze(0)

        with torch.no_grad():
            outputs = model(input_tensor)
            probs_tensor = torch.nn.functional.softmax(outputs, dim=1)[0]
            probs = probs_tensor.cpu().numpy()

        pred_idx = probs_tensor.argmax().item()
        original_label = class_names[pred_idx]
        confidence = probs[pred_idx]

        # üîÑ ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏° label ‡∏¢‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô label ‡∏´‡∏•‡∏±‡∏Å
        merge_map = {
            'cancer_inner': 'cancer',
            'cancer_outer': 'cancer',
            'herpes_inner': 'herpes',
            'herpes_outer': 'herpes',
        }

        # ‡πÉ‡∏ä‡πâ label ‡∏£‡∏ß‡∏° ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡πÉ‡∏ô map
        merged_label = merge_map.get(original_label, original_label)

        # üîÑ ‡∏£‡∏ß‡∏° all_probabilities ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£ merge ‡πÅ‡∏•‡∏∞‡πÄ‡∏≠‡∏≤‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏°
        merged_probs = {}
        for i in range(len(class_names)):
            name = class_names[i]
            prob = probs[i]
            merged_name = merge_map.get(name, name)

            # ‡∏ñ‡πâ‡∏≤ label ‡∏ô‡∏µ‡πâ‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏à‡∏≠‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            if merged_name in merged_probs:
                merged_probs[merged_name] = max(merged_probs[merged_name], prob)
            else:
                merged_probs[merged_name] = prob

        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô % ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á
        all_probs = {
            k: f"{v * 100:.2f}%" for k, v in sorted(
                merged_probs.items(), key=lambda item: item[1], reverse=True
            )
        }

        return {
            "status": "success",
            "label": merged_label,
            "confidence": f"{confidence * 100:.2f}%",
            "all_probabilities": all_probs
        }

    except Exception as e:
        return {
            "status": "error",
            "message": str(e)
        }


